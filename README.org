#+title: Emacs
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes :exports code :results silent

* Commentary :noexport:
#+begin_src emacs-lisp
  ;; init.el is auto-generated from README.org
#+end_src

* Package Management
** Archives
#+begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
#+end_src

** Install Automation
=use-package= has common keywords: [[https://github.com/jwiegley/use-package#customizing-variables][=:custom=]], [[https://github.com/jwiegley/use-package#customizing-variables][=:config=]]. 
#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

** Updates
#+begin_src emacs-lisp
  (use-package auto-package-update
    :custom
    (auto-package-update-prompt-before-update t)
    (auto-package-update-show-preview t)
    (auto-package-update-delete-old-versions t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe))
#+end_src

* UI
** Framing
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (set-fringe-mode 10)
  (menu-bar-mode -1)

  (column-number-mode)
  (global-display-line-numbers-mode t)
  (dolist (mode '(org-mode-hook eshell-mode-hook treemacs-mode-hook))
    (add-hook mode(lambda() (display-line-numbers-mode 0))))
#+end_src

** Themes
#+begin_src emacs-lisp
  (use-package doom-themes
    :init (load-theme 'doom-zenburn t))

  (use-package all-the-icons
    :custom (all-the-icons-install-fonts 1))

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))
#+end_src

* Org-Mode
** Graphics
#+begin_src emacs-lisp
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode))
#+end_src

** Code Evaluation
#+begin_src emacs-lisp
  (use-package org
    :custom
    (org-confirm-babel-evaluate nil)
    (org-babel-python-command "python3")
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)
       (shell . t)))
    (push '("conf-unix" . conf-unix) org-src-lang-modes))

  (use-package ob-async
    :custom
    ob-async-no-async-languages-alist '("ipython"))  
#+end_src

** Tangling
#+begin_src emacs-lisp
  (use-package org-tanglesync)
#+end_src

* Eshell
** PATH
Let's get the PATH for use in Emacs.
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-copy-env "JAVA_HOME")
      (exec-path-from-shell-initialize)))
#+end_src

** Bash Aliases
We convert bash aliases from =~/.bashrc= to eshell aliases. The
package =load-bash-alias= pollutes the eshell prompt, so after aliases
are loaded, we clear eshell. This chunk of code has the side-effect of
leaving eshell open at startup (which I prefer anyways).
#+begin_src emacs-lisp
  (use-package load-bash-alias
    :config
    (setq load-bash-alias-bashrc-file "~/.bashrc")
    (load-bash-alias-load-bash-aliases-into-eshell)
    (with-current-buffer "*eshell*"
      (insert "clear 1")
      (eshell-send-input)))
#+end_src

* Configuration
When the current directory is the emacs directory, then we tangle the Org file we are in, on save.
#+begin_src emacs-lisp
  (defun efs/tangle-config()
    (let ((thisDirectory (file-name-directory(buffer-file-name)))
	  (emacsDirectory (expand-file-name user-emacs-directory)))
      (when (string-equal thisDirectory emacsDirectory)
	(let ((org-confirm-babel-evaluate nil))
	  (org-babel-tangle)))))

  (add-hook 'org-mode-hook (lambda() (add-hook 'after-save-hook #'efs/tangle-config)))
#+end_src

* Which Key
#+begin_src emacs-lisp
  (use-package which-key
    :config
    (which-key-mode)
    (which-key-setup-side-window-bottom)
    :custom
    which-key-idle-delay 1.5)
#+end_src

* Projectile
#+begin_src emacs-lisp
  (use-package ivy)
  (use-package projectile
    :config (projectile-mode +1)
    :bind (:map global-map ("C-c p" . projectile-command-map))
    :custom ((projectile-completion-system 'ivy)))
#+end_src
Find a project file using =C-c p f=.

* Variable Searching
#+begin_src emacs-lisp
  (use-package iedit)
  (use-package rg
    :config
    (rg-enable-default-bindings))
#+end_src

** Renaming Project Variable
Cursor over the variable, search =C-c s d=, place cursor over the
variable in the results buffer, then iedit =C-;=, and finally apply
=C-x C-s= and save all buffers =C-x s !=. For searching without
variable under cursor, use =C-c s p=.

* LSP
#+begin_src emacs-lisp
  (use-package lsp-mode)
  (use-package lsp-ui)
#+end_src

* Company
#+begin_src emacs-lisp
  (use-package company
    :bind
    (:map company-active-map
	  ("<tab>" . company-complete-selection))
    (:map lsp-mode-map
	  ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))
#+end_src

* Treemacs
#+begin_src emacs-lisp
  (use-package lsp-treemacs
    :bind
    (:map global-map
	  ("C-`" . treemacs)))
#+end_src

* General Code Format
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (setq-default c-basic-offset 4)
#+end_src
* Python
To use lsp with python, we can install python's language server
#+begin_src bash
  python3 -m pip install python-language-server[all]
#+end_src

* JavaScript
#+begin_src emacs-lisp
  (use-package web-mode
    :init
    (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode)))
#+end_src
